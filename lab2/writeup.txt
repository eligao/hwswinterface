phase_1:
  String comparison.
  String is:
  "Science isn't about why, it's about why not?"

Phase_2:
  Loop
  6 digits (separated)
  passcode is in the form of :
  x y z x y z

Phase_3:
  Jump table (switch).
  Input 2 digits.
  Possible combinations:
    0 535
    1 926
    2 214
    3 339
    4 119
    5 352
    6 919
    7 412

Phase_4:
  input a number as i
  func4(i)=func4(i-1)+func4(i-2)
  (recursive fibonacci numbers generator)
  if func4(i)==55 then success
  answer here: i=9

Phase_5:
  Dump of assembler code for function phase_5:
=> 0x0000000000401002 <+0>:     sub    $0x18,%rsp
   0x0000000000401006 <+4>:     lea    0x8(%rsp),%rcx
   0x000000000040100b <+9>:     lea    0xc(%rsp),%rdx
   0x0000000000401010 <+14>:    mov    $0x401ebe,%esi
   0x0000000000401015 <+19>:    mov    $0x0,%eax                        # // prepare stack and sscanf call
   0x000000000040101a <+24>:    callq  0x400ab0 <__isoc99_sscanf@plt>   # read n nums as a, b
   0x000000000040101f <+29>:    cmp    $0x1,%eax                        # if n > 1 :
   0x0000000000401022 <+32>:    jg     0x401029 <phase_5+39>            #   pass
   0x0000000000401024 <+34>:    callq  0x40163d <explode_bomb>          # else : boom
   0x0000000000401029 <+39>:    mov    0xc(%rsp),%eax                   # eax = a
   0x000000000040102d <+43>:    and    $0xf,%eax                        # eax &= 0xF // clear all bits higher then 4th LSB
   0x0000000000401030 <+46>:    mov    %eax,0xc(%rsp)                   # a = eax
   0x0000000000401034 <+50>:    cmp    $0xf,%eax                        # if a == 0xF:
   0x0000000000401037 <+53>:    je     0x401065 <phase_5+99>            #   boom
   0x0000000000401039 <+55>:    mov    $0x0,%ecx                        # ecx = 0
   0x000000000040103e <+60>:    mov    $0x0,%edx                        # edx = 0
   0x0000000000401043 <+65>:    add    $0x1,%edx                        # do {  edx ++
   0x0000000000401046 <+68>:    cltq                                    #       convert_long_to_qword(eax) // arithmetically extend eax to rax, i.e. copy sign bit of eax to higher bits in rax (seems doing nothing here)
   0x0000000000401048 <+70>:    mov    0x401ba0(,%rax,4),%eax           #       eax = array[rax]    // see the following table for (int)array
   0x000000000040104f <+77>:    add    %eax,%ecx                        #       ecx += eax }
   0x0000000000401051 <+79>:    cmp    $0xf,%eax                        # while
   0x0000000000401054 <+82>:    jne    0x401043 <phase_5+65>            #    ( eax != 0xf )
   0x0000000000401056 <+84>:    mov    %eax,0xc(%rsp)                   # b = eax
   0x000000000040105a <+88>:    cmp    $0xc,%edx                        # if (edx != 0xc)
   0x000000000040105d <+91>:    jne    0x401065 <phase_5+99>            #   boom
   0x000000000040105f <+93>:    cmp    0x8(%rsp),%ecx                   # else if (ecx == b)
   0x0000000000401063 <+97>:    je     0x40106a <phase_5+104>           #   continue
   0x0000000000401065 <+99>:    callq  0x40163d <explode_bomb>          # else boom
   0x000000000040106a <+104>:   add    $0x18,%rsp                       # // restore stack
   0x000000000040106e <+108>:   retq                                    # return
End of assembler dump.

link array for eax=array[rax]
find the 0xC(12)th link before the value of 0xF (array[6])
0x401ba0 <array.3014>:         0 0x0000000a     1 0x00000002     2 0x0000000e     3 0x00000007
0x401bb0 <array.3014+16>:      4 0x00000008     5 0x0000000c     6>0x0000000f     7 0x0000000b
0x401bc0 <array.3014+32>:      8 0x00000000     9 0x00000004     a 0x00000001     b 0x0000000d
0x401bd0 <array.3014+48>:      c 0x00000003     d 0x00000009     e 0x00000006     f 0x00000005
The link list (reverse):
f<6<e<2<1<a<0<8<4<9<d<b<7<3<c<5<f
0 1 2 3 4 5 6 7 8 9 a b c d e f 0
^_______________________<
input a is the 12th link before value f. Here, a=7
input b it the sum of all values in the path of link. Here b = f+6+e+2+1+a+0+8+4+9+d+b(HEX) = 64(HEX) =93 (DEC)
therefore, the key is :
7 93

Phase_6:
Dump of assembler code for function main:
    ...
   0x0000000000400e4c <+296>:   callq  0x40165f <read_line>     # input = read_line();
   0x0000000000400e51 <+301>:   mov    %rax,%rdi                # 
   0x0000000000400e54 <+304>:   callq  0x4010d9 <phase_6>       # phase_6(input);
   0x0000000000400e59 <+309>:   callq  0x401785 <phase_defused> # phase_defused();
   0x0000000000400e5e <+314>:   mov    $0x0,%eax
   0x0000000000400e63 <+319>:   pop    %rbx
   0x0000000000400e64 <+320>:   retq                            # return 0;
End of assembler dump.

Dump of assembler code for function fun6:                       # node * fun6(node0);
   0x000000000040106f <+0>:     mov    0x8(%rdi),%r8            # sort the linked list at node0 from smaller to greater
   0x0000000000401073 <+4>:     movq   $0x0,0x8(%rdi)           # and return the new head
   0x000000000040107b <+12>:    mov    %rdi,%rax
   0x000000000040107e <+15>:    mov    %rdi,%rcx
   0x0000000000401081 <+18>:    test   %r8,%r8
   0x0000000000401084 <+21>:    jne    0x4010c6 <fun6+87>
   0x0000000000401086 <+23>:    mov    %rdi,%rax
   0x0000000000401089 <+26>:    retq
   0x000000000040108a <+27>:    mov    %rdx,%rcx
   0x000000000040108d <+30>:    mov    0x8(%rcx),%rdx
   0x0000000000401091 <+34>:    test   %rdx,%rdx
   0x0000000000401094 <+37>:    je     0x40109f <fun6+48>
   0x0000000000401096 <+39>:    cmp    %esi,(%rdx)
   0x0000000000401098 <+41>:    jg     0x40108a <fun6+27>
   0x000000000040109a <+43>:    mov    %rcx,%rdi
   0x000000000040109d <+46>:    jmp    0x4010a2 <fun6+51>
   0x000000000040109f <+48>:    mov    %rcx,%rdi
   0x00000000004010a2 <+51>:    cmp    %rdx,%rdi
   0x00000000004010a5 <+54>:    je     0x4010ad <fun6+62>
   0x00000000004010a7 <+56>:    mov    %r8,0x8(%rdi)
   0x00000000004010ab <+60>:    jmp    0x4010 b0 <fun6+65>
   0x00000000004010ad <+62>:    mov    %r8,%rax
   0x00000000004010b0 <+65>:    mov    0x8(%r8),%rcx
   0x00000000004010b4 <+69>:    mov    %rdx,0x8(%r8)
   0x00000000004010b8 <+73>:    test   %rcx,%rcx
   0x00000000004010bb <+76>:    je     0x4010d7 <fun6+104>
   0x00000000004010bd <+78>:    mov    %rcx,%r8
   0x00000000004010c0 <+81>:    mov    %rax,%rcx
   0x00000000004010c3 <+84>:    mov    %rax,%rdi
   0x00000000004010c6 <+87>:    mov    %rcx,%rdx
   0x00000000004010c9 <+90>:    test   %rcx,%rcx
   0x00000000004010cc <+93>:    je     0x4010a2 <fun6+51>
   0x00000000004010ce <+95>:    mov    (%r8),%esi
   0x00000000004010d1 <+98>:    cmp    %esi,(%rcx)
   0x00000000004010d3 <+100>:   jg     0x40108d <fun6+30>
   0x00000000004010d5 <+102>:   jmp    0x4010a2 <fun6+51>
   0x00000000004010d7 <+104>:   repz retq
End of assembler dump.

Dump of assembler code for function phase_6:                    # phase_6(input) {
=> 0x00000000004010d9 <+0>:     sub    $0x8,%rsp                    # stack-=8
   0x00000000004010dd <+4>:     mov    $0xa,%edx                    # edx = 10
   0x00000000004010e2 <+9>:     mov    $0x0,%esi                    # esi = 0
   0x00000000004010e7 <+14>:    callq  0x400b80 <strtol@plt>        # int v = strtol(input, esi, 10);
   0x00000000004010ec <+19>:    mov    %eax,0x20168e(%rip)          # node0.val = v; // 0x602780 <node0>
   0x00000000004010f2 <+25>:    mov    $0x602780,%edi               
   0x00000000004010f7 <+30>:    callq  0x40106f <fun6>              # node * p_node = func6((node*) 0x602780);
   0x00000000004010fc <+35>:    mov    0x8(%rax),%rax               # p_node = p_node.next;
   0x0000000000401100 <+39>:    mov    0x8(%rax),%rax               # p_node = p_node.next;
   0x0000000000401104 <+43>:    mov    0x8(%rax),%rax               # p_node = p_node.next;
   0x0000000000401108 <+47>:    mov    0x201672(%rip),%edx          # v = node0.val; // 0x602780 <node0> 
   0x000000000040110e <+53>:    cmp    %edx,(%rax)                  # if v != p_node->val;
   0x0000000000401110 <+55>:    je     0x401117 <phase_6+62>        #   return; 
   0x0000000000401112 <+57>:    callq  0x40163d <explode_bomb>      # else boom;
   0x0000000000401117 <+62>:    add    $0x8,%rsp
   0x000000000040111b <+66>:    retq
End of assembler dump.


struct node
{
    int val;
    int id;
    int *next;
};                          ~~~~~~~~~v this value is modified as your input  
    0x602780 <node0>:       0x00000000      0x00000000      0x00602790      0x00000000
    0x602790 <node1>:       0x00000176      0x00000001      0x006027a0      0x00000000
    0x6027a0 <node2>:       0x0000033a      0x00000002      0x006027b0      0x00000000
    0x6027b0 <node3>:       0x00000172      0x00000003      0x006027c0      0x00000000
    0x6027c0 <node4>:       0x0000030e      0x00000004      0x006027d0      0x00000000
    0x6027d0 <node5>:       0x000001e8      0x00000005      0x006027e0      0x00000000
    0x6027e0 <node6>:       0x000002a1      0x00000006      0x006027f0      0x00000000
    0x6027f0 <node7>:       0x0000011e      0x00000007      0x00602800      0x00000000
    0x602800 <node8>:       0x00000258      0x00000008      0x00602810      0x00000000
    0x602810 <node9>:       0x00000211      0x00000009      0x00000000      0x00000000

summary: 
1. read in a number v (DEC)
2. link list node0.val = v
3. sort the linked list in fun6, in a smaller to larger manner
4. get the 4th node p_node in the linked list 
5. if v == p_node.val (here, it is 600, at node8)
6. pass! 

Secret Phase:

Dump of assembler code for function phase_defused:
   0x0000000000401785 <+0>:     sub    $0x68,%rsp
   0x0000000000401789 <+4>:     cmpl   $0x6,0x2014f0(%rip)        # 0x602c80 <num_input_strings>
   0x0000000000401790 <+11>:    jne    0x4017f0 <phase_defused+107>
   0x0000000000401792 <+13>:    lea    0x10(%rsp),%rcx
   0x0000000000401797 <+18>:    lea    0xc(%rsp),%rdx
   0x000000000040179c <+23>:    mov    $0x401ec4,%esi                   # char* p_input_phase_4 = 0x401ec4;
   0x00000000004017a1 <+28>:    mov    $0x603030,%edi                   # char* p_secret_pattern = "%d %s";
   0x00000000004017a6 <+33>:    mov    $0x0,%eax                        # int sscanf ( const char * s, const char * format, ...);
   0x00000000004017ab <+38>:    callq  0x400ab0 <__isoc99_sscanf@plt>   # int n = sscanf( p_input_phase_4, p_secret_pattern, rdx, rcx);
   0x00000000004017b0 <+43>:    cmp    $0x2,%eax                        # if( n !=2 )
   0x00000000004017b3 <+46>:    jne    0x4017e6 <phase_defused+97>      #   boom;
   0x00000000004017b5 <+48>:    mov    $0x401eca,%esi                   # else  // "austinpowers"@0x401eca 
   0x00000000004017ba <+53>:    lea    0x10(%rsp),%rdi                  #   if strings_not_equal(rcx, "austinpowers")   
   0x00000000004017bf <+58>:    callq  0x40123d <strings_not_equal>
   0x00000000004017c4 <+63>:    test   %eax,%eax
   0x00000000004017c6 <+65>:    jne    0x4017e6 <phase_defused+97>
   0x00000000004017c8 <+67>:    mov    $0x401c40,%edi
   0x00000000004017cd <+72>:    callq  0x400aa0 <puts@plt>              # puts("Curses, you've found the secret phase!");
   0x00000000004017d2 <+77>:    mov    $0x401c68,%edi
   0x00000000004017d7 <+82>:    callq  0x400aa0 <puts@plt>              # puts("But finding it and solving it are quite different...");
   0x00000000004017dc <+87>:    mov    $0x0,%eax
   0x00000000004017e1 <+92>:    callq  0x40115a <secret_phase>          # secret_phase();
   0x00000000004017e6 <+97>:    mov    $0x401ca0,%edi
   0x00000000004017eb <+102>:   callq  0x400aa0 <puts@plt>
   0x00000000004017f0 <+107>:   add    $0x68,%rsp
   0x00000000004017f4 <+111>:   retq
End of assembler dump.

Dump of assembler code for function secret_phase:
   0x000000000040115a <+0>:     push   %rbx                         
   0x000000000040115b <+1>:     callq  0x40165f <read_line>         # char* line = read_line();
   0x0000000000401160 <+6>:     mov    $0xa,%edx
   0x0000000000401165 <+11>:    mov    $0x0,%esi                    # // Convert string to long int
   0x000000000040116a <+16>:    mov    %rax,%rdi                    # // long int strtol (const char* str, char** endptr, int base);
   0x000000000040116d <+19>:    callq  0x400b80 <strtol@plt>        # int v1 = strtol( line, esi, 10);
   0x0000000000401172 <+24>:    mov    %eax,%ebx                    # 
   0x0000000000401174 <+26>:    lea    -0x1(%rbx),%eax              # 
   0x0000000000401177 <+29>:    cmp    $0x3e8,%eax                  # if (v1 <= 1001) // 1000=0x3e8 
   0x000000000040117c <+34>:    jbe    0x401183 <secret_phase+41>   #   continue;
   0x000000000040117e <+36>:    callq  0x40163d <explode_bomb>      # else boom;
   0x0000000000401183 <+41>:    mov    %ebx,%esi                    # 
   0x0000000000401185 <+43>:    mov    $0x6025a0,%edi               # tree_node* p_node = &n1;  // n1@0x6025a0
   0x000000000040118a <+48>:    callq  0x40111c <fun7>              # if (fun7(p_node, v2) == 3)
   0x000000000040118f <+53>:    cmp    $0x3,%eax                    #   continue;
   0x0000000000401192 <+56>:    je     0x401199 <secret_phase+63>   #
   0x0000000000401194 <+58>:    callq  0x40163d <explode_bomb>      # else boom;
   0x0000000000401199 <+63>:    mov    $0x401b28,%edi               
   0x000000000040119e <+68>:    callq  0x400aa0 <puts@plt>          # puts("Wow! You've defused the secret stage!");
   0x00000000004011a3 <+73>:    callq  0x401785 <phase_defused>
   0x00000000004011a8 <+78>:    pop    %rbx
   0x00000000004011a9 <+79>:    retq
End of assembler dump.

Dump of assembler code for function fun7:                       # int fun7(node * , val) 
   0x000000000040111c <+0>:	sub    $0x8,%rsp
   0x0000000000401120 <+4>:	test   %rdi,%rdi                    # if (node == NULL)
   0x0000000000401123 <+7>:	je     0x401150 <fun7+52>           #       return 0xffffffff;
   0x0000000000401125 <+9>:	mov    (%rdi),%edx                  # int node_val = node->val;
   0x0000000000401127 <+11>:	cmp    %esi,%edx                # if (node_val > val)
   0x0000000000401129 <+13>:	jle    0x401138 <fun7+28>       # {  
   0x000000000040112b <+15>:	mov    0x8(%rdi),%rdi           #   
   0x000000000040112f <+19>:	callq  0x40111c <fun7>          #   eax = fun7(node->lchild, val);
   0x0000000000401134 <+24>:	add    %eax,%eax                #   eax = eax * 2;
   0x0000000000401136 <+26>:	jmp    0x401155 <fun7+57>       # } else // node_val <= val
   0x0000000000401138 <+28>:	mov    $0x0,%eax                # { eax = 0;
   0x000000000040113d <+33>:	cmp    %esi,%edx                #   if (esi == node_val)
   0x000000000040113f <+35>:	je     0x401155 <fun7+57>       #       return eax;
   0x0000000000401141 <+37>:	mov    0x10(%rdi),%rdi          #   else 
   0x0000000000401145 <+41>:	callq  0x40111c <fun7>          #   {   eax = fun7(node->rchild, val)
   0x000000000040114a <+46>:	lea    0x1(%rax,%rax,1),%eax    #       eax = eax + eax + 1     // Get here twice to make a 3.
   0x000000000040114e <+50>:	jmp    0x401155 <fun7+57>       #   }                           // eax = 0+0+1 = 1
   0x0000000000401150 <+52>:	mov    $0xffffffff,%eax         # }                             // eax = 1+1+1 = 3
   0x0000000000401155 <+57>:	add    $0x8,%rsp
   0x0000000000401159 <+61>:	retq                            # return eax;   // here we need eax = 3. 
End of assembler dump.



0x6025a0 <n1>:	    0x00000024	0x00000000	0x006025c0	0x00000000
0x6025b0 <n1+16>:	0x006025e0	0x00000000	0x00000000	0x00000000
0x6025c0 <n21>:	    0x00000008	0x00000000	0x00602640	0x00000000
0x6025d0 <n21+16>:	0x00602600	0x00000000	0x00000000	0x00000000
0x6025e0 <n22>:	    0x00000032	0x00000000	0x00602620	0x00000000
0x6025f0 <n22+16>:	0x00602660	0x00000000	0x00000000	0x00000000
0x602600 <n32>:	    0x00000016	0x00000000	0x00602720	0x00000000
0x602610 <n32+16>:	0x006026e0	0x00000000	0x00000000	0x00000000
0x602620 <n33>:	    0x0000002d	0x00000000	0x00602680	0x00000000
0x602630 <n33+16>:	0x00602740	0x00000000	0x00000000	0x00000000
0x602640 <n31>:	    0x00000006	0x00000000	0x006026a0	0x00000000
0x602650 <n31+16>:	0x00602700	0x00000000	0x00000000	0x00000000
0x602660 <n34>:	    0x0000006b	0x00000000	0x006026c0	0x00000000
0x602670 <n34+16>:	0x00602760	0x00000000	0x00000000	0x00000000
0x602680 <n45>:	    0x00000028	0x00000000	0x00000000	0x00000000
0x602690 <n45+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x6026a0 <n41>:	    0x00000001	0x00000000	0x00000000	0x00000000
0x6026b0 <n41+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x6026c0 <n47>:	    0x00000063	0x00000000	0x00000000	0x00000000
0x6026d0 <n47+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x6026e0 <n44>:	    0x00000023	0x00000000	0x00000000	0x00000000
0x6026f0 <n44+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x602700 <n42>:	    0x00000007	0x00000000	0x00000000	0x00000000
0x602710 <n42+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x602720 <n43>:	    0x00000014	0x00000000	0x00000000	0x00000000
0x602730 <n43+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x602740 <n46>:	    0x0000002f	0x00000000	0x00000000	0x00000000
0x602750 <n46+16>:	0x00000000	0x00000000	0x00000000	0x00000000
0x602760 <n48>:	    0x000003e9	0x00000000	0x00000000	0x00000000

struct tree_node{
    int val;
    tree_node* lchild, rchild;
};

which actually makes a binary search tree :
                            n1 36
                    /               \
            n21 8                          n22 50
        /       \                       /       \
    n31 6           n32 22          n33 45          n34 107 (password)
    /   \          /    \           /   \         /     \
n41     n42     n43     n44     n45     n46     n47     n48
1       7       20      35      40      47      99      1001

Summary: 
    In this secret phase, we need to find it and resolve it.
    I:  To find it, phase_defused() rescans password in phase_4, and check the 2nd entry. 
        If it is "austinpowers", we get into the secret_phase().
    II: To defuse it, we get into secret_phase(). In it, it reads another number and call
        fun7(tree_node* ,value). It is defused when fun7 returns with 3.
        Fun7 is a binary search algorithm on a binary search tree rooted at tree_node*. 
        The tree can be found above. To get a 3, we need to traverse to right child twice.
        This leads to our password 107.


